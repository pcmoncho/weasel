"use strict";function getTreeIndexs(a,b,c){c.push(b),a[b].folders.length&&a[b].folders.forEach(b=>{let d=-1;a.forEach((a,c)=>{a.name===b&&(d=c)});getTreeIndexs(a,d,c)})}const fork=require("child_process").fork,fs=require("fs");let process,folders=require("../resources/folders"),resources=require("../resources/rests"),currentProcess=require("../resources/current-process"),options=require("../resources/options");exports.listFolders=((a,b)=>{let c=a.params.name;let d;d=folders.find(a=>a.name===c);d||b.status(500).send("Unknown folder");b.status(200).jsonp(d)}),exports.listRests=((a,b)=>{b.status(200).jsonp(resources)}),exports.importFolder=((a,b)=>{let c=a.params.name;let d=-1;let e=parseInt(a.params.addRest,10);let f=a.body;let g=!1;d=folders.findIndex(a=>a.name===c);folders.forEach(a=>{a.name===f.name&&(g=!0)});if(g)b.status(200).send({error:"Name of folder already exist"});else if(e){let a="";g=!1,f.content.forEach(b=>{resources.forEach(c=>{b.name===c.name&&(a=c.name,g=!0)})}),g?b.status(200).send({error:`Name of rest ${a} already exist`}):(folders.push(f),folders[d].folders.push(f.name),fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);f||b.status(200).jsonp(folders[d])}),f.content.forEach(a=>{resources.push(a)}),fs.writeFile("resources/rests.json",JSON.stringify(resources),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[d])}))}else folders.push(f),folders[d].folders.push(f.name),fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[d])})}),exports.addFolder=((a,b)=>{let c=!1;let d=a.params.name;let e=a.body;let f={};let g=-1;f=folders.find(a=>a.name===d);g=folders.findIndex(a=>a.name===d);f.folders.forEach(a=>{a===e.name&&(c=!0)});c?b.status(500).send("ELEMENT DUPLICATED"):(folders.push(e),folders[g].folders.push(e.name),fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[g])}))}),exports.addRest=((a,b)=>{let c=!1;let d=a.params.name;let e=a.body;let g=-1;folders.find(a=>a.name===d);g=folders.findIndex(a=>a.name===d);resources.forEach(a=>{a.name===e.name&&(c=!0)});c?b.status(200).send({error:`Name of rest ${e.name} is duplicated`}):(resources.push(e),folders[g].content.push(e),fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);fs.writeFile("resources/rests.json",JSON.stringify(resources),a=>{a&&b.status(500).send(a);b.status(200).send(e)})}))}),exports.deleteFolder=((a,b)=>{let c=a.body.name;let d=a.params.name;let e=[];let f=-1;let g=-1;let h=[];f=folders.findIndex(a=>a.name===c);g=folders.findIndex(a=>a.name===d);folders.forEach((a,b)=>{let d=a.folders.indexOf(c);-1!==d&&e.push([b,d])});e.forEach(a=>{folders[a[0]].folders.splice(a[1],1)});getTreeIndexs(folders,f,h);h.reverse().forEach(a=>folders.splice(a,1));fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[g])})}),exports.deleteRest=((a,b)=>{let c=a.params.name;let d=a.body;let e=[];let f=-1;let g=-1;g=folders.findIndex(a=>a.name===c);resources.forEach((a,b)=>{a.name===d.name&&(f=b)});folders.forEach((a,b)=>{let c=-1;a.content.forEach((a,b)=>{a.name===d.name&&(c=b)});-1!==c&&e.push([b,c])});e.forEach(a=>{folders[a[0]].content.splice(a[1],1)});resources.splice(f,1);fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);fs.writeFile("resources/rests.json",JSON.stringify(resources),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[g])})})}),exports.editFolder=((a,b)=>{let c=a.params.name;let d=a.params.old;let e=a.body;let f=-1;let g=-1;let h=-1;f=folders.findIndex(a=>a.name===d);g=folders.findIndex(a=>a.name===c);h=folders[g].folders.findIndex(a=>a===d);folders[f].name=e.name;folders[g].folders[h]=e.name;fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[g])})}),exports.editRest=((a,b)=>{let c=!1;let d=a.params.name;let e=a.body;let f={};let g=-1;let h=-1;let i=[];f=folders.find(a=>a.name===d);g=folders.findIndex(a=>a.name===d);f.content.forEach(a=>{a.name===e.name&&(c=!0)});resources.forEach((a,b)=>{a.name===e.name&&(h=b)});c&&(resources.splice(h,1),folders.forEach((a,b)=>{let c=-1;a.content.forEach((a,b)=>{a.name===e.name&&(c=b)});-1!==c&&i.push([b,c])}),i.forEach(a=>{folders[a[0]].content.splice(a[1],1)}));resources.push(e);folders[g].content.push(e);fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);fs.writeFile("resources/rests.json",JSON.stringify(resources),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[g])})})}),exports.removeRest=((a,b)=>{let c=a.params.name;let d=-1;let e={};let f=-1;let g=a.body;e=folders.find(a=>a.name===c);d=folders.findIndex(a=>a.name===c);f=e.content.findIndex(a=>a.name===g.name);console.log(`folder[${d}].content.splice(${f}, 1)`);folders[d].content.splice(f,1);fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[d])})}),exports.addRestToFolder=((a,b)=>{let c=a.params.name;let d=a.body;let e=-1;e=folders.findIndex(a=>a.name===c);folders[e].content.push(d);fs.writeFile("resources/folders.json",JSON.stringify(folders),a=>{a&&b.status(500).send(a);b.status(200).jsonp(folders[e])})}),exports.listOptions=((a,b)=>{b.status(200).jsonp(options)}),exports.saveOptions=((a,b)=>{console.log(options.port);console.log(a.body.port);options.port=a.body.port;fs.writeFile("resources/options.json",JSON.stringify(options),a=>{a&&b.status(500).send(a);b.status(200).send("SUCCESS")})}),exports.start=((a,b)=>{let c=folders.find(b=>b.name===a.params.name);fs.writeFile("resources/current-process.json",JSON.stringify(c.content),a=>{a&&b.status(500).send(a);let c=fork("index");c.on("message",a=>b.status(200).send(a));process=c;b.status(200).send("OK")})}),exports.kill=((a,b)=>{process.kill();b.status(200).send("KILLED")});